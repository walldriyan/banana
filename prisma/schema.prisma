// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  // The following setting is required for environments like AWS Lambda
  // that need a library engine instead of a binary engine.
  engineType    = "library"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// =======================================
// Core Multi-Tenant Models
// =======================================

// Represents a company or a branch in the system
model Company {
  id      String   @id @default(cuid())
  name    String
  address String?
  phone   String?
  // Relationships
  users   User[]
  products Product[]
  customers Customer[]
  transactions Transaction[]
}

// Represents a user (e.g., cashier, manager) of the system
model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  role      String   // e.g., "admin", "manager", "cashier"
  password  String   // In a real app, this should be a hash
  // Relationships
  company   Company  @relation(fields: [companyId], references: [id])
  companyId String
  transactions Transaction[]
}


// =======================================
// POS-Specific Models
// =======================================

model Customer {
  id      String   @id @default(cuid())
  name    String
  phone   String?
  address String?
  // Relationships
  transactions Transaction[]
  company   Company  @relation(fields: [companyId], references: [id])
  companyId String
  
  @@unique([companyId, name]) // A customer name should be unique within a company
}

model Product {
  id        String    @id @default(cuid())
  name      String
  category  String?
  isService Boolean   @default(false)
  isActive  Boolean   @default(true)
  // Relationships
  company   Company   @relation(fields: [companyId], references: [id])
  companyId String
  batches   ProductBatch[]
  lines     TransactionLine[]
  
  @@unique([companyId, name]) // A product name should be unique within a company
}

model ProductBatch {
  id           String    @id @default(cuid())
  batchNumber  String
  sellingPrice Float
  costPrice    Float
  quantity     Float
  // Relationships
  product      Product   @relation(fields: [productId], references: [id])
  productId    String
  lines        TransactionLine[]
  
  @@unique([productId, batchNumber])
}


// =======================================
// Transactional Models
// =======================================

model Transaction {
  id                    String               @id @default(cuid())
  transactionDate       DateTime
  subtotal              Float
  totalDiscountAmount   Float
  finalTotal            Float
  totalItems            Int
  totalQuantity         Float
  status                String // "completed", "refund", "pending"
  campaignId            String
  isGiftReceipt         Boolean              @default(false)
  originalTransactionId String?              @unique
  // Relationships
  lines                 TransactionLine[]
  appliedDiscounts      AppliedDiscountLog[]
  payment               Payment?
  customer              Customer             @relation(fields: [customerId], references: [id])
  customerId            String
  user                  User                 @relation(fields: [userId], references: [id]) // Who performed the transaction
  userId                String
  company               Company              @relation(fields: [companyId], references: [id]) // Which company owns this transaction
  companyId             String
}

model TransactionLine {
  id                       String        @id @default(cuid())
  displayUnit              String
  displayQuantity          Float
  quantity                 Float
  unitPrice                Float
  lineTotalBeforeDiscount  Float
  lineDiscount             Float
  lineTotalAfterDiscount   Float
  customDiscountValue      Float?
  customDiscountType       String?
  customApplyFixedOnce     Boolean?
  // Relationships
  transaction              Transaction   @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  transactionId            String
  product                  Product       @relation(fields: [productId], references: [id]) // No cascade delete
  productId                String
  productName              String        // Denormalized for receipt printing
  batch                    ProductBatch? @relation(fields: [batchId], references: [id]) // No cascade delete
  batchId                  String?
  batchNumber              String?       // Denormalized for receipt printing
}

model Payment {
  id                String      @id @default(cuid())
  paidAmount        Float
  paymentMethod     String // "cash", "card", "online"
  outstandingAmount Float
  isInstallment     Boolean
  // Relationships
  transaction       Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  transactionId     String      @unique
}

model AppliedDiscountLog {
  id                       String      @id @default(cuid())
  discountCampaignName     String
  sourceRuleName           String
  totalCalculatedDiscount  Float
  ruleType                 String
  productIdAffected        String?
  batchIdAffected          String?
  appliedOnce              Boolean?
  // Relationships
  transaction              Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  transactionId            String
}
