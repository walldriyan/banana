// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  // The 'binaryTargets' line is a fix for deployment environments that may not have the default OpenSSL version.
  // It tells Prisma to generate query engines compatible with multiple OpenSSL versions.
  binaryTargets   = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "sqlite"
  // This line tells Prisma to look for the database connection string in the .env file.
  url      = env("DATABASE_URL")
}

// ==================================
// Data Models for the POS System
// ==================================

// Customer Information
model Customer {
  id          String        @id @default(cuid())
  name        String
  phone       String?
  address     String?
  transactions Transaction[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

// Main Transaction Model
model Transaction {
  id                  String        @id
  transactionDate     DateTime      @default(now())
  subtotal            Float
  totalDiscountAmount Float
  finalTotal          Float
  totalItems          Int
  totalQuantity       Float
  status              String // "completed", "refund", "pending"
  campaignId          String
  isGiftReceipt       Boolean       @default(false)
  originalTransactionId String?

  // Relations
  customer            Customer      @relation(fields: [customerId], references: [id])
  customerId          String
  lines               TransactionLine[]
  appliedDiscounts    AppliedDiscountLog[]
  payment             Payment?
}

// Individual lines within a transaction
model TransactionLine {
  id                      String   @id @default(cuid())
  saleItemId              String
  productId               String
  productName             String
  batchId                 String?
  batchNumber             String?
  quantity                Float
  displayUnit             String
  displayQuantity         Float
  unitPrice               Float
  lineTotalBeforeDiscount Float
  lineDiscount            Float
  lineTotalAfterDiscount  Float
  customDiscountValue     Float?
  customDiscountType      String?
  customApplyFixedOnce    Boolean?

  // Relation
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId String
}

// Log of applied discounts for auditing
model AppliedDiscountLog {
  id                      String   @id @default(cuid())
  discountCampaignName    String
  sourceRuleName          String
  totalCalculatedDiscount Float
  ruleType                String
  productIdAffected       String?
  batchIdAffected         String?
  appliedOnce             Boolean?

  // Relation
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId String
}

// Payment details for a transaction
model Payment {
  id                String   @id @default(cuid())
  paidAmount        Float
  paymentMethod     String // "cash", "card", "online"
  outstandingAmount Float
  isInstallment     Boolean

  // Relation (One-to-One)
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId String      @unique
}
