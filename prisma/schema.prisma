// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x"]
  engineType    = "library"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Company {
  id           String        @id @default(cuid())
  name         String        @unique
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  users        User[]
  products     Product[]
  customers    Customer[]
  transactions Transaction[]
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  name      String?
  role      String    @default("cashier")
  companyId String
  company   Company   @relation(fields: [companyId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  transactions Transaction[]

  @@index([companyId])
}

model Product {
  id           String        @id @default(cuid())
  name         String
  sellingPrice Float
  category     String?
  unitsJson    String // Storing units as a JSON string
  stock        Int
  isService    Boolean       @default(false)
  isActive     Boolean       @default(true)
  companyId    String
  company      Company       @relation(fields: [companyId], references: [id])
  batches      ProductBatch[]
  lineItems    LineItem[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@index([companyId])
}

model ProductBatch {
  id           String   @id @default(cuid())
  batchNumber  String
  sellingPrice Float
  costPrice    Float
  quantity     Int
  productId    String
  product      Product  @relation(fields: [productId], references: [id])
  lineItems    LineItem[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([productId, batchNumber])
  @@index([productId])
}

model Customer {
  id        String        @id @default(cuid())
  name      String
  phone     String?
  address   String?
  companyId String
  company   Company       @relation(fields: [companyId], references: [id])
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  transactions Transaction[]

  @@index([companyId])
}

model Transaction {
  id                   String               @id @default(cuid())
  transactionDate      DateTime             @default(now())
  subtotal             Float
  totalDiscountAmount  Float
  finalTotal           Float
  totalItems           Int
  totalQuantity        Float
  status               String               @default("completed") // e.g., 'completed', 'refund'
  campaignId           String?
  originalTransactionId String?
  isGiftReceipt        Boolean              @default(false)
  
  companyId            String
  company              Company              @relation(fields: [companyId], references: [id])
  
  userId               String
  user                 User                 @relation(fields: [userId], references: [id])
  
  customerId           String
  customer             Customer             @relation(fields: [customerId], references: [id])

  payment              Payment?
  lineItems            LineItem[]
  appliedDiscounts     AppliedDiscountLog[]

  @@index([customerId])
  @@index([userId])
  @@index([companyId])
}

model LineItem {
  id                       String      @id @default(cuid())
  productName              String
  quantity                 Float
  displayUnit              String
  displayQuantity          Float
  unitPrice                Float
  lineTotalBeforeDiscount  Float
  lineDiscount             Float
  lineTotalAfterDiscount   Float
  customDiscountValue      Float?
  customDiscountType       String?
  customApplyFixedOnce     Boolean?
  
  transactionId            String
  transaction              Transaction @relation(fields: [transactionId], references: [id])
  
  productId                String
  product                  Product     @relation(fields: [productId], references: [id])

  batchId                  String?
  batch                    ProductBatch? @relation(fields: [batchId], references: [id])

  @@index([transactionId])
  @@index([productId])
  @@index([batchId])
}

model Payment {
  id                String      @id @default(cuid())
  paidAmount        Float
  paymentMethod     String
  outstandingAmount Float
  isInstallment     Boolean
  
  transactionId     String      @unique
  transaction       Transaction @relation(fields: [transactionId], references: [id])
}

model AppliedDiscountLog {
  id                      String      @id @default(cuid())
  discountCampaignName    String
  sourceRuleName          String
  totalCalculatedDiscount Float
  ruleType                String
  productIdAffected       String?
  batchIdAffected         String?
  appliedOnce             Boolean?
  
  transactionId           String
  transaction             Transaction @relation(fields: [transactionId], references: [id])

  @@index([transactionId])
}
