// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  // The following line fixes the openssl issue
  binaryTargets = ["native", "debian-openssl-1.1.x"]
  // The following line ensures prisma works in more environments
  engineType    = "library"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ==============
// Core Models
// ==============

model Company {
  id         String    @id @default(cuid())
  name       String    @unique
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  users      User[]
  products   Product[]
  customers  Customer[]
  transactions Transaction[]
}

model User {
  id        String    @id @default(cuid())
  name      String
  email     String    @unique
  role      String    // e.g., 'admin', 'manager', 'cashier'
  companyId String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  company   Company   @relation(fields: [companyId], references: [id])
  transactions Transaction[]
}

model Customer {
  id        String    @id @default(cuid())
  name      String
  phone     String?
  address   String?
  companyId String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  company   Company   @relation(fields: [companyId], references: [id])
  transactions Transaction[]
}

// ==============
// Product Catalog
// ==============

model Product {
  id            String    @id @default(cuid())
  name          String
  sellingPrice  Float
  category      String?
  unitsJson     String    // Storing complex unit data as a JSON string
  stock         Int
  isService     Boolean
  isActive      Boolean
  defaultQuantity Int
  companyId     String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  company       Company   @relation(fields: [companyId], references: [id])
  batches       ProductBatch[]
  lineItems     LineItem[]
}

model ProductBatch {
  id            String    @id @default(cuid())
  batchNumber   String
  sellingPrice  Float
  costPrice     Float
  quantity      Int
  productId     String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  product       Product   @relation(fields: [productId], references: [id])
  lineItems     LineItem[]
}

// ==============
// Transaction Data
// ==============

model Transaction {
  id                    String    @id @default(cuid())
  transactionDate       DateTime  @default(now())
  subtotal              Float
  totalDiscountAmount   Float
  finalTotal            Float
  totalItems            Int
  totalQuantity         Float
  status                String    // 'completed', 'refund', 'pending'
  campaignId            String?
  isGiftReceipt         Boolean   @default(false)
  originalTransactionId String?
  companyId             String
  customerId            String
  userId                String
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  company   Company   @relation(fields: [companyId], references: [id])
  customer  Customer  @relation(fields: [customerId], references: [id])
  user      User      @relation(fields: [userId], references: [id])
  
  payment   Payment?
  lineItems LineItem[]
  appliedDiscounts AppliedDiscountLog[]

  @@index([originalTransactionId])
}

model LineItem {
  id                      String    @id @default(cuid())
  transactionId           String
  productId               String
  batchId                 String?
  productName             String
  batchNumber             String?
  quantity                Float
  displayUnit             String
  displayQuantity         Float
  unitPrice               Float
  lineTotalBeforeDiscount Float
  lineDiscount            Float
  lineTotalAfterDiscount  Float
  customDiscountValue     Float?
  customDiscountType      String?   // 'fixed' or 'percentage'
  customApplyFixedOnce    Boolean?

  transaction Transaction @relation(fields: [transactionId], references: [id])
  product     Product     @relation(fields: [productId], references: [id])
  batch       ProductBatch? @relation(fields: [batchId], references: [id])
}

model Payment {
  id                String    @id @default(cuid())
  transactionId     String    @unique
  paidAmount        Float
  paymentMethod     String
  outstandingAmount Float
  isInstallment     Boolean
  
  transaction Transaction @relation(fields: [transactionId], references: [id])
}

model AppliedDiscountLog {
  id                      String    @id @default(cuid())
  transactionId           String
  discountCampaignName    String
  sourceRuleName          String
  totalCalculatedDiscount Float
  ruleType                String
  productIdAffected       String?
  batchIdAffected         String?
  appliedOnce             Boolean?

  transaction Transaction @relation(fields: [transactionId], references: [id])
}
