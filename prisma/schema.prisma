// prisma/schema.prisma
datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider        = "prisma-client-js"
  // Use the library engine to avoid environment compatibility issues with the binary engine
  engineType      = "library"
  binaryTargets   = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x"]
}

// -------------------
// MODELS
// -------------------

model Company {
  id           String        @id @default(cuid())
  name         String        @unique
  users        User[]
  customers    Customer[]
  products     Product[]
  transactions Transaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id        String    @id @default(cuid())
  name      String
  email     String?   @unique
  role      String    @default("cashier")
  companyId String
  company   Company   @relation(fields: [companyId], references: [id])
  transactions Transaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Customer {
  id        String    @id @default(cuid())
  name      String
  phone     String?
  address   String?
  companyId String
  company   Company   @relation(fields: [companyId], references: [id])
  transactions Transaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          String         @id @default(cuid())
  name        String
  category    String?
  sellingPrice Float
  stock       Float
  unitsJson   String // Storing complex unit data as a JSON string
  isService   Boolean        @default(false)
  isActive    Boolean        @default(true)
  companyId   String
  company     Company        @relation(fields: [companyId], references: [id])
  batches     ProductBatch[]
  lines       TransactionLine[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([companyId])
}

model ProductBatch {
  id           String   @id @default(cuid())
  batchNumber  String
  sellingPrice Float
  costPrice    Float
  quantity     Float
  productId    String
  product      Product  @relation(fields: [productId], references: [id])
  lines        TransactionLine[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productId, batchNumber])
}

model Transaction {
  id                   String        @id
  transactionDate      DateTime
  subtotal             Float
  totalDiscountAmount  Float
  finalTotal           Float
  totalItems           Int
  totalQuantity        Float
  status               String        @default("completed") // e.g., completed, refund, pending
  campaignId           String?
  isGiftReceipt        Boolean       @default(false)
  
  originalTransactionId String?       @unique
  
  customerId String
  userId     String
  companyId  String
  
  customer Customer @relation(fields: [customerId], references: [id])
  user     User     @relation(fields: [userId], references: [id])
  company  Company  @relation(fields: [companyId], references: [id])

  lines            TransactionLine[]
  appliedDiscounts AppliedDiscountLog[]
  payment          Payment?
  
  @@index([customerId])
  @@index([userId])
  @@index([companyId])
}

model TransactionLine {
  id                   String   @id @default(cuid())
  productName          String
  batchNumber          String?
  quantity             Float
  displayUnit          String
  displayQuantity      Float
  unitPrice            Float
  lineTotalBeforeDiscount Float
  lineDiscount         Float
  lineTotalAfterDiscount Float
  
  customDiscountValue     Float?
  customDiscountType      String? // "fixed" or "percentage"
  customApplyFixedOnce    Boolean?
  
  transactionId String
  productId     String
  batchId       String?

  transaction Transaction  @relation(fields: [transactionId], references: [id])
  product     Product      @relation(fields: [productId], references: [id])
  batch       ProductBatch? @relation(fields: [batchId], references: [id])

  @@index([transactionId])
}

model Payment {
  id                String      @id @default(cuid())
  paidAmount        Float
  paymentMethod     String
  outstandingAmount Float
  isInstallment     Boolean
  transactionId     String      @unique
  transaction       Transaction @relation(fields: [transactionId], references: [id])
}

model AppliedDiscountLog {
  id                      String   @id @default(cuid())
  discountCampaignName    String
  sourceRuleName          String
  totalCalculatedDiscount Float
  ruleType                String
  productIdAffected       String?
  batchIdAffected         String?
  appliedOnce             Boolean?
  
  transactionId String
  transaction   Transaction @relation(fields: [transactionId], references: [id])
}
