// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  // This is the definitive fix for the OpenSSL/Schema Engine errors in this environment
  engineType    = "library"
  // This is required for deploying to some serverless environments
  binaryTargets = ["native"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}


// -------------------
// Core Models
// -------------------

model Company {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users    User[]
  products Product[]
  customers Customer[]
  transactions Transaction[]
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  role      String   // e.g., 'admin', 'manager', 'cashier'
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  company   Company @relation(fields: [companyId], references: [id])
  companyId String

  transactions Transaction[]
}

model Customer {
  id        String   @id @default(cuid())
  name      String
  phone     String?
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  company   Company @relation(fields: [companyId], references: [id])
  companyId String

  transactions Transaction[]
}


// -------------------
// Product & Inventory Models
// -------------------

model Product {
  id            String   @id @default(cuid())
  name          String
  category      String?
  sellingPrice  Float
  unitsJson     String   // Storing unit definitions as a stringified JSON
  stock         Int      @default(0)
  isService     Boolean  @default(false)
  isActive      Boolean  @default(true)
  defaultQuantity Float  @default(1)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  company       Company @relation(fields: [companyId], references: [id])
  companyId     String

  batches      ProductBatch[]
  lineItems    TransactionLine[]
}

model ProductBatch {
  id            String   @id @default(cuid())
  batchNumber   String
  sellingPrice  Float
  costPrice     Float
  quantity      Float
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  product   Product @relation(fields: [productId], references: [id])
  productId String
}

// -------------------
// Transaction Models
// -------------------

model Transaction {
  id                  String    @id
  transactionDate     DateTime  @default(now())
  subtotal            Float
  totalDiscountAmount Float
  finalTotal          Float
  totalItems          Int
  totalQuantity       Float
  status              String    // 'completed', 'refund', 'pending'
  campaignId          String
  isGiftReceipt       Boolean   @default(false)
  originalTransactionId String?

  company    Company @relation(fields: [companyId], references: [id])
  companyId  String
  
  user       User @relation(fields: [userId], references: [id])
  userId     String

  customer   Customer @relation(fields: [customerId], references: [id])
  customerId String

  lines            TransactionLine[]
  payment          Payment?
  appliedDiscounts AppliedDiscountLog[]
}

model TransactionLine {
  id                      String   @id @default(cuid())
  productName             String
  batchNumber             String?
  quantity                Float    // Base unit quantity
  displayUnit             String
  displayQuantity         Float
  unitPrice               Float
  lineTotalBeforeDiscount Float
  lineDiscount            Float
  lineTotalAfterDiscount  Float
  
  // Custom discount state
  customDiscountValue     Float?
  customDiscountType      String?  // 'fixed' or 'percentage'
  customApplyFixedOnce    Boolean?

  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId String

  product   Product @relation(fields