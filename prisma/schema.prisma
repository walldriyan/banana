// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  // The following line is the ideal fix for OpenSSL/environment issues
  engineType    = "library"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "sqlite"
  // Hardcoding the path directly to avoid any environment variable confusion.
  // This forces Prisma to look for the database file inside the 'prisma' directory.
  url      = "file:./dev.db"
}

// ==================
// Foundational Models
// ==================

model Company {
  id           String    @id @default(cuid())
  name         String    @unique
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  users        User[]
  customers    Customer[]
  products     Product[]
  transactions Transaction[]
}

model User {
  id        String    @id @default(cuid())
  name      String
  role      String // e.g., 'admin', 'manager', 'cashier'
  companyId String
  company   Company   @relation(fields: [companyId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  transactions Transaction[]

  @@unique([name, companyId])
}

model Customer {
  id          String    @id @default(cuid())
  name        String
  phone       String?
  address     String?
  companyId   String
  company     Company   @relation(fields: [companyId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  transactions Transaction[]
}

// ==================
// Product Models
// ==================

model Product {
  id           String    @id @default(cuid())
  name         String
  sellingPrice Float
  category     String?
  stock        Int
  unitsJson    String // Storing complex unit data as a JSON string
  isService    Boolean
  isActive     Boolean
  defaultQuantity Float
  companyId    String
  company      Company   @relation(fields: [companyId], references: [id])
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  batches      ProductBatch[]
  lineItems    LineItem[]
}

model ProductBatch {
  id            String    @id @default(cuid())
  batchNumber   String
  sellingPrice  Float
  costPrice     Float
  quantity      Float
  productId     String
  product       Product   @relation(fields: [productId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lineItems     LineItem[]

  // A batch is unique to its number within a specific product and company
  @@unique([batchNumber, productId])
}

// ====================
// Transactional Models
// ====================

model Transaction {
  id                  String    @id
  transactionDate     DateTime  @default(now())
  subtotal            Float
  totalDiscountAmount Float
  finalTotal          Float
  totalItems          Int
  totalQuantity       Float
  status              String // 'completed', 'refund', 'pending'
  campaignId          String
  isGiftReceipt       Boolean
  originalTransactionId String?

  companyId           String
  company             Company   @relation(fields: [companyId], references: [id])
  
  customerId          String
  customer            Customer  @relation(fields: [customerId], references: [id])

  userId              String
  user                User      @relation(fields: [userId], references: [id])

  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  
  lines               LineItem[]
  payment             Payment?
  appliedDiscounts    AppliedDiscountLog[]
}

model LineItem {
  id                        String      @id @default(cuid())
  productName               String
  batchNumber               String?
  quantity                  Float
  displayUnit               String
  displayQuantity           Float
  unitPrice                 Float
  lineTotalBeforeDiscount   Float
  lineDiscount              Float
  lineTotalAfterDiscount    Float
  customDiscountValue       Float?
  customDiscountType        String?
  customApplyFixedOnce      Boolean?

  transactionId             String
  transaction               Transaction @relation(fields: [transactionId], references: [id])

  productId                 String
  product                   Product     @relation(fields: [productId], references: [id])

  batchId                   String?
  batch                     ProductBatch? @relation(fields: [batchId], references: [id])
}

model Payment {
  id                  String      @id @default(cuid())
  paidAmount          Float
  paymentMethod       String // 'cash', 'card', 'online'
  outstandingAmount   Float
  isInstallment       Boolean
  
  transactionId       String      @unique
  transaction         Transaction @relation(fields: [transactionId], references: [id])
}

model AppliedDiscountLog {
  id                      String      @id @default(cuid())
  discountCampaignName    String
  sourceRuleName          String
  totalCalculatedDiscount Float
  ruleType                String
  productIdAffected       String?
  batchIdAffected         String?
  appliedOnce             Boolean?

  transactionId           String
  transaction             Transaction @relation(fields: [transactionId], references: [id])
}
