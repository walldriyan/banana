generator client {
  provider     = "prisma-client-js"
  engineType   = "library"
  binaryTargets = ["native", "rhel-openssl-1.1.x"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Company {
  id             String         @id @default(cuid())
  name           String         @unique
  users          User[]
  products       Product[]
  customers      Customer[]
  transactions   Transaction[]
  productBatches ProductBatch[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model User {
  id           String        @id @default(cuid())
  name         String
  role         String // e.g., 'admin', 'manager', 'cashier'
  companyId    String
  Company      Company       @relation(fields: [companyId], references: [id])
  transactions Transaction[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Product {
  id              String         @id @default(cuid())
  name            String
  sellingPrice    Float
  category        String?
  stock           Int
  unitsJson       String // Storing complex unit data as a JSON string
  isService       Boolean
  isActive        Boolean
  defaultQuantity Int
  companyId       String
  Company         Company        @relation(fields: [companyId], references: [id])
  batches         ProductBatch[]
  lineItems       LineItem[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model ProductBatch {
  id           String     @id @default(cuid())
  batchNumber  String
  sellingPrice Float
  costPrice    Float
  quantity     Int
  productId    String
  Product      Product    @relation(fields: [productId], references: [id])
  companyId    String
  Company      Company    @relation(fields: [companyId], references: [id])
  lineItems    LineItem[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Customer {
  id           String        @id @default(cuid())
  name         String
  phone        String?
  address      String?
  companyId    String
  Company      Company       @relation(fields: [companyId], references: [id])
  transactions Transaction[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@unique([name, companyId])
}

model Transaction {
  id                    String                 @id @default(cuid())
  transactionDate       DateTime               @default(now())
  subtotal              Float
  totalDiscountAmount   Float
  finalTotal            Float
  totalItems            Int
  totalQuantity         Float
  status                String // "completed", "refund", "pending"
  campaignId            String
  isGiftReceipt         Boolean                @default(false)
  originalTransactionId String?
  companyId             String
  Company               Company                @relation(fields: [companyId], references: [id])
  userId                String
  User                  User                   @relation(fields: [userId], references: [id])
  customerId            String
  Customer              Customer               @relation(fields: [customerId], references: [id])
  payment               Payment?
  lines                 LineItem[]
  appliedDiscounts      AppliedDiscountLog[]
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
}

model Payment {
  id                String      @id @default(cuid())
  paidAmount        Float
  paymentMethod     String // "cash", "card", "online"
  outstandingAmount Float
  isInstallment     Boolean
  transactionId     String      @unique
  Transaction       Transaction @relation(fields: [transactionId], references: [id])
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}

model LineItem {
  id                       String        @id @default(cuid())
  productName              String
  quantity                 Float
  displayUnit              String
  displayQuantity          Float
  unitPrice                Float
  lineTotalBeforeDiscount  Float
  lineDiscount             Float
  lineTotalAfterDiscount   Float
  customDiscountValue      Float?
  customDiscountType       String? // "fixed" or "percentage"
  customApplyFixedOnce     Boolean?
  transactionId            String
  Transaction              Transaction   @relation(fields: [transactionId], references: [id])
  productId                String
  Product                  Product       @relation(fields: [productId], references: [id])
  batchId                  String?
  ProductBatch             ProductBatch? @relation(fields: [batchId], references: [id])
  createdAt                DateTime      @default(now())
  updatedAt                DateTime      @updatedAt
}

model AppliedDiscountLog {
  id                      String      @id @default(cuid())
  discountCampaignName    String
  sourceRuleName          String
  totalCalculatedDiscount Float
  ruleType                String
  productIdAffected       String?
  batchIdAffected         String?
  appliedOnce             Boolean?
  transactionId           String
  Transaction             Transaction @relation(fields: [transactionId], references: [id])
  createdAt               DateTime    @default(now())
}
