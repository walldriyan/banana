// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  engineType = "library"
}

datasource db {
  provider = "postgresql" // Changed from "sqlite"
  url      = env("DATABASE_URL")
}

model Product {
  id                      String                    @id @default(cuid())
  name                    String
  sellingPrice            Float
  category                String?
  stock                   Int
  unitsJson               Json                      @map("units_json") // Changed back to Json for PostgreSQL
  isService               Boolean
  isActive                Boolean
  defaultQuantity         Float
  batches                 ProductBatch[]
  transactionLines        TransactionLine[]
}

model ProductBatch {
  id                      String                    @id @default(cuid())
  batchNumber             String                    @unique
  sellingPrice            Float
  costPrice               Float
  quantity                Int
  productId               String
  product                 Product                   @relation(fields: [productId], references: [id])
  transactionLines        TransactionLine[]
}

model Transaction {
  id                      String                    @id
  transactionDate         DateTime                  @default(now())
  subtotal                Float
  totalDiscountAmount     Float
  finalTotal              Float
  totalItems              Int
  totalQuantity           Float
  status                  String
  campaignId              String
  isGiftReceipt           Boolean                   @default(false)
  originalTransactionId   String?
  
  customerId              String
  customer                Customer                  @relation(fields: [customerId], references: [id])
  
  payment                 Payment?
  lines                   TransactionLine[]
  appliedDiscounts        AppliedDiscountLog[]

  @@index([originalTransactionId])
}

model TransactionLine {
  id                      String          @id @default(cuid())
  productName             String
  quantity                Float
  displayUnit             String
  displayQuantity         Float
  unitPrice               Float
  lineTotalBeforeDiscount Float
  lineDiscount            Float
  lineTotalAfterDiscount  Float
  customDiscountValue     Float?
  customDiscountType      String?
  customApplyFixedOnce    Boolean?

  productId               String
  product                 Product         @relation(fields: [productId], references: [id])

  batchId                 String?
  batch                   ProductBatch?   @relation(fields: [batchId], references: [id])

  transactionId           String
  transaction             Transaction     @relation(fields: [transactionId], references: [id])

  @@index([transactionId])
}

model AppliedDiscountLog {
  id                      String      @id @default(cuid())
  discountCampaignName    String
  sourceRuleName          String
  totalCalculatedDiscount Float
  ruleType                String
  productIdAffected       String?
  batchIdAffected         String?
  appliedOnce             Boolean?

  transactionId           String
  transaction             Transaction @relation(fields: [transactionId], references: [id])

  @@index([transactionId])
}

model Customer {
  id          String        @id @default(cuid())
  name        String        @unique
  phone       String?
  address     String?
  role        String        @default("customer")
  transactions Transaction[]
}

model Payment {
  id                  String      @id @default(cuid())
  paidAmount          Float
  paymentMethod       String
  outstandingAmount   Float
  isInstallment       Boolean

  transactionId       String      @unique
  transaction         Transaction @relation(fields: [transactionId], references: [id])
}
