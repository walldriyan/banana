// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  // The following line is needed for the Docker-based environment of Studio
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x"]
  // Use the library engine for broader compatibility
  engineType    = "library"
}

datasource db {
  provider = "sqlite"
  // This URL is loaded from the .env file.
  url      = env("DATABASE_URL")
}

// ==============
// Core Models
// ==============

model Company {
  id      String @id @default(cuid())
  name    String @unique
  address String?

  users         User[]
  customers     Customer[]
  products      Product[]
  batches       ProductBatch[]
  transactions  Transaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id       String  @id @default(cuid())
  email    String  @unique
  name     String?
  role     String  @default("cashier") // 'admin', 'manager', 'cashier'
  password String

  companyId String
  company   Company @relation(fields: [companyId], references: [id])

  transactions Transaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Customer {
  id      String  @id @default(cuid())
  name    String
  phone   String?
  address String?

  companyId String
  company   Company @relation(fields: [companyId], references: [id])

  transactions Transaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, companyId]) // A customer's name should be unique within a company
}

model Product {
  id                String  @id @default(cuid())
  name              String
  sellingPrice      Float
  category          String?
  stock             Float
  isService         Boolean @default(false)
  isActive          Boolean @default(true)
  defaultQuantity   Float   @default(1)
  unitsJson         String  // Storing UnitDefinition as a JSON string
  
  companyId String
  company   Company @relation(fields: [companyId], references: [id])

  batches           ProductBatch[]
  transactionLines  TransactionLine[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

   @@unique([name, companyId])
}

model ProductBatch {
  id            String  @id @default(cuid())
  batchNumber   String
  sellingPrice  Float
  costPrice     Float
  quantity      Float

  companyId String
  company   Company @relation(fields: [companyId], references: [id])
  
  productId String
  product   Product @relation(fields: [productId], references: [id])

  transactionLines TransactionLine[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([batchNumber, productId, companyId])
}

// ==============
// Transactional Models
// ==============

model Transaction {
  id                      String    @id
  transactionDate         DateTime  @default(now())
  subtotal                Float
  totalDiscountAmount     Float
  finalTotal              Float
  totalItems              Int
  totalQuantity           Float
  status                  String // 'completed', 'refund', 'pending'
  campaignId              String?
  isGiftReceipt           Boolean   @default(false)
  originalTransactionId   String?

  companyId String
  company   Company @relation(fields: [companyId], references: [id])
  
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id])

  userId String
  user   User @relation(fields: [userId], references: [id])

  payment           Payment?
  lines             TransactionLine[]
  appliedDiscounts  AppliedDiscountLog[]
}

model TransactionLine {
  id                        String  @id @default(cuid())
  productName               String
  quantity                  Float
  displayUnit               String
  displayQuantity           Float
  unitPrice                 Float
  lineTotalBeforeDiscount   Float
  lineDiscount              Float
  lineTotalAfterDiscount    Float
  customDiscountValue       Float?
  customDiscountType        String? // 'fixed' or 'percentage'
  customApplyFixedOnce      Boolean?

  transactionId String
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)

  productId String
  product   Product @relation(fields: [productId], references: [id])

  batchId     String?
  batchNumber String?
  batch       ProductBatch? @relation(fields: [batchId], references: [id], onDelete: SetNull)
}

model Payment {
  id                String      @id @default(cuid())
  paidAmount        Float
  paymentMethod     String // 'cash', 'card', 'online'
  outstandingAmount Float
  isInstallment     Boolean

  transactionId String      @unique
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
}

model AppliedDiscountLog {
  id                      String  @id @default(cuid())
  discountCampaignName    String
  sourceRuleName          String
  totalCalculatedDiscount Float
  ruleType                String
  productIdAffected       String?
  batchIdAffected         String?
  appliedOnce             Boolean?

  transactionId String
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
}
