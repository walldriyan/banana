generator client {
  provider      = "prisma-client-js"
  engineType    = "library"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Company {
  id           String        @id @default(cuid())
  name         String        @unique
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  users        User[]
  customers    Customer[]
  products     Product[]
  transactions Transaction[]
}

model User {
  id        String    @id @default(cuid())
  name      String
  email     String?   @unique
  password  String
  role      String    @default("cashier")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  companyId String
  company   Company   @relation(fields: [companyId], references: [id])
  transactions Transaction[]

  @@index([companyId])
}

model Customer {
  id           String        @id @default(cuid())
  name         String
  phone        String?
  address      String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  companyId    String
  company      Company       @relation(fields: [companyId], references: [id])
  transactions Transaction[]

  @@index([companyId])
}

model Product {
  id                      String         @id @default(cuid())
  name                    String
  category                String?
  sellingPrice            Float
  unitsJson               String // Storing units config as a JSON string
  stock                   Float          @default(0)
  isActive                Boolean        @default(true)
  isService               Boolean        @default(false)
  createdAt               DateTime       @default(now())
  updatedAt               DateTime       @updatedAt
  companyId               String
  company                 Company        @relation(fields: [companyId], references: [id])
  batches                 ProductBatch[]
  transactionLines        LineItem[]

  @@index([companyId])
}

model ProductBatch {
  id                 String     @id @default(c„ÅÜid())
  batchNumber        String
  sellingPrice       Float
  costPrice          Float
  quantity           Float
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  productId          String
  product            Product    @relation(fields: [productId], references: [id])
  transactionLines   LineItem[]

  @@unique([productId, batchNumber])
  @@index([productId])
}

model Transaction {
  id                    String               @id
  transactionDate       DateTime             @default(now())
  subtotal              Float
  totalDiscountAmount   Float
  finalTotal            Float
  totalItems            Int
  totalQuantity         Float
  status                String               @default("completed") // "completed", "refund"
  isGiftReceipt         Boolean              @default(false)
  campaignId            String?
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  companyId             String
  company               Company              @relation(fields: [companyId], references: [id])
  customerId            String
  customer              Customer             @relation(fields: [customerId], references: [id])
  userId                String
  user                  User                 @relation(fields: [userId], references: [id])
  lines                 LineItem[]
  appliedDiscounts      AppliedDiscountLog[]
  payment               Payment?
  originalTransactionId String?              @unique
  refundTransaction     Transaction?         @relation("Refund", fields: [originalTransactionId], references: [id])
  originalTransaction   Transaction?         @relation("Refund")

  @@index([companyId])
  @@index([customerId])
  @@index([userId])
}

model LineItem {
  id                       String      @id @default(cuid())
  productName              String
  quantity                 Float
  displayUnit              String
  displayQuantity          Float
  unitPrice                Float
  lineTotalBeforeDiscount  Float
  lineDiscount             Float
  lineTotalAfterDiscount   Float
  customDiscountValue      Float?
  customDiscountType       String?
  customApplyFixedOnce     Boolean?
  createdAt                DateTime    @default(now())
  updatedAt                DateTime    @updatedAt
  transactionId            String
  transaction              Transaction @relation(fields: [transactionId], references: [id])
  productId                String
  product                  Product     @relation(fields: [productId], references: [id])
  batchId                  String?
  batch                    ProductBatch? @relation(fields: [batchId], references: [id])

  @@index([transactionId])
  @@index([productId])
  @@index([batchId])
}

model AppliedDiscountLog {
  id                      String      @id @default(cuid())
  discountCampaignName    String
  sourceRuleName          String
  totalCalculatedDiscount Float
  ruleType                String
  productIdAffected       String?
  batchIdAffected         String?
  appliedOnce             Boolean?
  createdAt               DateTime    @default(now())
  transactionId           String
  transaction             Transaction @relation(fields: [transactionId], references: [id])

  @@index([transactionId])
}

model Payment {
  id                String      @id @default(cuid())
  paidAmount        Float
  paymentMethod     String
  outstandingAmount Float
  isInstallment     Boolean
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  transactionId     String      @unique
  transaction       Transaction @relation(fields: [transactionId], references: [id])
}
