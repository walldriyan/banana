// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider     = "prisma-client-js"
  // This is the definitive fix for the Firebase Studio environment error.
  engineType   = "library"
  binaryTargets = ["native", "rhel-openssl-1.1.x"]
}

datasource db {
  provider = "sqlite"
  // This points to the dev.db file in the prisma folder
  url      = "file:./dev.db"
}

// MODELS

model Company {
  id         String        @id @default(cuid())
  name       String        @unique
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  users      User[]
  customers  Customer[]
  products   Product[]
  batches    ProductBatch[]
  transactions Transaction[]
}

model User {
  id        String    @id @default(cuid())
  name      String
  email     String?   @unique
  role      String    // e.g., 'admin', 'manager', 'cashier'
  password  String // This should be a hash in a real app
  companyId String
  company   Company   @relation(fields: [companyId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  transactions Transaction[]
}

model Customer {
  id        String    @id @default(cuid())
  name      String
  phone     String?
  address   String?
  companyId String
  company   Company   @relation(fields: [companyId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  transactions Transaction[]
}

model Product {
  id            String         @id @default(cuid())
  name          String
  sellingPrice  Float
  category      String?
  stock         Int
  unitsJson     String // Storing complex unit data as a JSON string
  isService     Boolean        @default(false)
  isActive      Boolean        @default(true)
  companyId     String
  company       Company        @relation(fields: [companyId], references: [id])
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  batches       ProductBatch[]
  lineItems     LineItem[]
}

model ProductBatch {
  id           String     @id @default(cuid())
  batchNumber  String
  sellingPrice Float
  costPrice    Float
  quantity     Int
  productId    String
  product      Product    @relation(fields: [productId], references: [id])
  companyId    String
  company      Company    @relation(fields: [companyId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  lineItems    LineItem[]
}

model Transaction {
  id                  String               @id
  transactionDate     DateTime             @default(now())
  subtotal            Float
  totalDiscountAmount Float
  finalTotal          Float
  totalItems          Int
  totalQuantity       Float
  status              String // 'completed', 'refund', 'pending'
  campaignId          String
  isGiftReceipt       Boolean              @default(false)
  originalTransactionId String?

  customerId          String
  customer            Customer             @relation(fields: [customerId], references: [id])

  userId              String
  user                User                 @relation(fields: [userId], references: [id])
  
  companyId           String
  company             Company              @relation(fields: [companyId], references: [id])

  payment             Payment?
  lineItems           LineItem[]
  appliedDiscounts    AppliedDiscountLog[]
}

model LineItem {
  id                       String      @id @default(cuid())
  productId                String
  product                  Product     @relation(fields: [productId], references: [id])
  productName              String
  batchId                  String?
  batch                    ProductBatch? @relation(fields: [batchId], references: [id])
  batchNumber              String?
  quantity                 Float
  displayUnit              String
  displayQuantity          Float
  unitPrice                Float
  lineTotalBeforeDiscount  Float
  lineDiscount             Float
  lineTotalAfterDiscount   Float
  customDiscountValue      Float?
  customDiscountType       String?
  customApplyFixedOnce     Boolean?

  transactionId            String
  transaction              Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
}

model Payment {
  id                String      @id @default(cuid())
  paidAmount        Float
  paymentMethod     String
  outstandingAmount Float
  isInstallment     Boolean
  transactionId     String      @unique
  transaction       Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
}

model AppliedDiscountLog {
  id                      String      @id @default(cuid())
  discountCampaignName    String
  sourceRuleName          String
  totalCalculatedDiscount Float
  ruleType                String
  productIdAffected       String?
  batchIdAffected         String?
  appliedOnce             Boolean?

  transactionId           String
  transaction             Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
}
