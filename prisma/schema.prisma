generator client {
  provider      = "prisma-client-js"
  engineType    = "library"
  output        = "../node_modules/.prisma/client"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Customer {
  id          String        @id @default(cuid())
  name        String        @unique
  phone       String?
  address     String?
  transactions Transaction[]
}

model Transaction {
  id                    String               @id
  transactionDate       DateTime
  subtotal              Float
  totalDiscountAmount   Float
  finalTotal            Float
  totalItems            Int
  totalQuantity         Float
  status                String
  campaignId            String
  isGiftReceipt         Boolean              @default(false)
  originalTransactionId String?
  customer              Customer             @relation(fields: [customerId], references: [id])
  customerId            String
  lines                 TransactionLine[]
  appliedDiscounts      AppliedDiscountLog[]
  payment               Payment[]
}

model TransactionLine {
  id                       String   @id @default(cuid())
  transactionId            String
  transaction              Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  productId                String
  productName              String
  batchId                  String?
  batchNumber              String?
  quantity                 Float
  displayUnit              String
  displayQuantity          Float
  unitPrice                Float
  lineTotalBeforeDiscount  Float
  lineDiscount             Float
  lineTotalAfterDiscount   Float
  customDiscountValue      Float?
  customDiscountType       String?
  customApplyFixedOnce     Boolean?
}

model AppliedDiscountLog {
  id                      String   @id @default(cuid())
  transactionId           String
  transaction             Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  discountCampaignName    String
  sourceRuleName          String
  totalCalculatedDiscount Float
  ruleType                String
  productIdAffected       String?
  batchIdAffected         String?
  appliedOnce             Boolean?
}

model Payment {
  id                String   @id @default(cuid())
  transactionId     String   @unique
  transaction       Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  paidAmount        Float
  paymentMethod     String
  outstandingAmount Float
  isInstallment     Boolean
}
