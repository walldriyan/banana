// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  // The following line is the fix for the OpenSSL issue
  binaryTargets = ["native", "linux-musl-openssl-3.0.x", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ==============================================================
// App Data Models
// ==============================================================

model Transaction {
  id                    String                 @id @default(cuid())
  transactionDate       DateTime               @default(now())
  subtotal              Float
  totalDiscountAmount   Float
  finalTotal            Float
  totalItems            Int
  totalQuantity         Float
  status                String // "completed", "refund", "pending"
  campaignId            String
  isGiftReceipt         Boolean                @default(false)
  originalTransactionId String?                @unique
  
  customerId            String
  customer              Customer               @relation(fields: [customerId], references: [id])
  
  payment               Payment?
  lines                 TransactionLine[]
  appliedDiscounts      AppliedDiscountLog[]
}

model Customer {
  id          String        @id @default(cuid())
  name        String        @unique
  phone       String?
  address     String?
  Transaction Transaction[]
}

model Payment {
  id                String      @id @default(cuid())
  paidAmount        Float
  paymentMethod     String // "cash", "card", "online"
  outstandingAmount Float
  isInstallment     Boolean
  
  transactionId     String      @unique
  transaction       Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
}

model TransactionLine {
  id                      String      @id @default(cuid())
  saleItemId              String
  productId               String
  productName             String
  batchId                 String?
  batchNumber             String?
  quantity                Float
  displayUnit             String
  displayQuantity         Float
  unitPrice               Float
  lineTotalBeforeDiscount Float
  lineDiscount            Float
  lineTotalAfterDiscount  Float
  customDiscountValue     Float?
  customDiscountType      String? // "fixed" or "percentage"
  customApplyFixedOnce    Boolean?
  
  transactionId           String
  transaction             Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
}

model AppliedDiscountLog {
  id                      String      @id @default(cuid())
  discountCampaignName    String
  sourceRuleName          String
  totalCalculatedDiscount Float
  ruleType                String
  productIdAffected       String?
  batchIdAffected         String?
  appliedOnce             Boolean?
  
  transactionId           String
  transaction             Transaction @relation(fields: [transactionId], references
: [id], onDelete: Cascade)
}
